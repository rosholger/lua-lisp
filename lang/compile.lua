local parse = require('lang.parser')
local lua_ast_package = require('lang.lua_ast')
local lisp_ast_builder = require('lang.lisp_ast')
local lisp_ast_to_lua_ast = require('lang.lisp_ast_to_lua_ast')
local macro_expand = require('lang.macro_expand')
local reader = require('lang.reader')
local luacode_generator = require('lang.luacode_generator')
local generator = require('lang.generator')

-- Two kind of backend can be used to generate the code from the AST:
-- - "generator", generates LuaJIT bytecode
-- - "luacode_generator", generates Lua code
--
-- Both can be used interchangeably, they take the AST tree and produce
-- a string that can be passed to the function "loadstring".
-- In the case of the bytecode generator the string will be actually a
-- binary blob that corresponds to the generated bytecode.

local function lang_toolkit_error(msg)
    if string.sub(msg, 1, 9) == "LLT-ERROR" then
        return false, "luajit-lang-toolkit: " .. string.sub(msg, 10)
    else
        error(msg)
    end
end

local function compile(ls, filename, options)
    local lisp_ast = parse(lisp_ast_builder, ls)
    lisp_ast = macro_expand(lisp_ast)
    local lua_ast_builder = lua_ast_package.New()
    local lua_ast = lisp_ast_to_lua_ast(lisp_ast, lua_ast_builder, true)
    local luacode = generator(lua_ast, filename)
    return luacode
end

local function lang_loadstring(src, filename, options)
    return compile(reader.string(src), filename or "stdin", options)
end

local function lang_loadfile(filename, options)
    return compile(reader.file(filename), filename or "stdin", options)
end

return { string = lang_loadstring, file = lang_loadfile, compile = compile }
